// JavaScript Objects

// An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method. Objects in JavaScript, just as in many other programming languages, can be compared to objects in real life.

// The following example creates a JavaScript object with four key/value properties:

const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};

// The object is created with the object literal syntax, which is a shorthand way of creating objects.

// assign() Copies properties from a source object to a target object
// constructor Returns the function that created an object's prototype
// create() Returns an object created from an existing object
// defineProperties() Adds or changes properties
// defineProperty() Adds or changes a property
// entries() Returns an array of the key/value pairs of an object
// freeze() Prevents any changes to an object
// fromEntries() Returns an object created from an iterable list of key/value pairs
// getOwnPropertyDescriptor() Returns an array of the keys of an object
// getOwnPropertyDescriptors() Returns an array of the keys of an object
// getOwnPropertyNames() Returns an array of the keys of an object
// groupBy() Groups object elements according to returned callback values
// isExtensible() Returns true if an object is extensible
// isFrozen() Returns true if an object is frozen
// isSealed() Returns true if an object is sealed
// keys() Returns an array of the keys of an object
// preventExtensions() Prevents adding new properties to an object
// prototype Let you to add properties and methods to JavaScript objects
// seal() Prevents adding new or deleting existing object properties
// toString() Converts an object to a string and returns the result
// valueOf() Returns the primitive value of an object
// values() Returns an array of the property values of an object
